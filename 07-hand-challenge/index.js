const CASE_ONE =
  "ðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘Š";
const CASE_TWO =
  "ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‡ðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘†ðŸ‘‰ðŸ‘‡ðŸ¤œðŸ‘†ðŸ¤›ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘†ðŸ‘‰ðŸ‘†ðŸ¤›ðŸ‘‰ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘Š";

const MIN_VALUE = 0;
const MAX_VALUE = 255;
function translate(string) {
  let memory = [0];
  let pointer = 0;
  let index = 0;
  let output = "";

  const instructions = Array.from(string);

  const getNextFist = () => {
    let fistCount = 1;
    for (let i = index + 1; i < instructions.length; i++) {
      if (instructions[i] === "ðŸ¤œ") fistCount++;
      if (instructions[i] === "ðŸ¤›") fistCount--;
      if (fistCount === 0) return i;
    }
  };

  const getPreviousFist = () => {
    let fistCount = 1;
    for (let i = index - 1; i >= 0; i--) {
      if (instructions[i] === "ðŸ¤œ") fistCount--;
      if (instructions[i] === "ðŸ¤›") fistCount++;
      if (fistCount === 0) return i;
    }
  };

  const actions = {
    "ðŸ‘‰": () => {
      pointer++;
      memory[pointer] ??= 0;
    },
    "ðŸ‘ˆ": () => {
      pointer--;
      memory[pointer] ??= 0;
    },
    "ðŸ‘†": () => {
      const value = memory[pointer];
      memory[pointer] = value === MAX_VALUE ? MIN_VALUE : value + 1;
    },
    "ðŸ‘‡": () => {
      const value = memory[pointer];
      memory[pointer] = value === MIN_VALUE ? MAX_VALUE : value - 1;
    },
    "ðŸ¤œ": () => {
      if (memory[pointer] === 0) {
        index = getNextFist();
      }
    },
    "ðŸ¤›": () => {
      if (memory[pointer] !== 0) {
        index = getPreviousFist();
      }
    },
    "ðŸ‘Š": () => {
      output += String.fromCharCode(memory[pointer]);
    },
  };

  while (index < instructions.length) {
    const instruction = instructions[index];
    actions[instruction]();

    //   console.log({
    //     i: index,
    //     inst: instruction,
    //     pointer,
    //     out: output,
    //   });

    index++;
  }

  return output;
}

console.log({ "Case One": translate(CASE_ONE) });
console.log({ "Case Two": translate(CASE_TWO) });

module.exports = translate;
